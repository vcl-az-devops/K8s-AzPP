- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: '-auto-approve -var "client_id=$(client_id)" -var "client_secret=$(client_secret)"'
    workingDirectory: '$(System.DefaultWorkingDirectory)/path/to/your/terraform/configuration'


terraform plan -var client_id="e0051092-9c36-465b-97ec-71f173494a02" -var client_secret="64j8Q~wLo0CwQakUD5xYBKLI.C6g1GOxUBAT3ccM"

strategy: 'canary'

- task: Kubernetes@1
  displayName: 'Deploy to Kubernetes cluster'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: '<your_kubernetes_service_connection>'
    namespace: '<your_namespace>'
    command: 'apply'
    arguments: '-f path/to/first_manifest.yaml,path/to/second_manifest.yaml'


- stage: Deploy_to_AKS
  dependsOn: Build_Image
  jobs:
  - job: DeployToAks
    displayName: DeployToAks
    steps:


arguments: '-var="client_id=e0051092-9c36-465b-97ec-71f173494a02"  -var="client_secret=64j8Q~wLo0CwQakUD5xYBKLI.C6g1GOxUBAT3ccM"



- stage: Deploy
  dependsOn: Build_Image
  jobs:
  - job: Build_Image
    displayName: Build_Image
    pool:
      #name: Azure Pipelines
      name: ${{ parameters.poolname }}   
    steps:
    - task: KubernetesManifest@1
      inputs:
        action: 'createSecret'
        connectionType: 'azureResourceManager'
        azureSubscriptionConnection: 'az-devops-sp-vishwa'
        azureResourceGroup: 'aks-vishwa'
        kubernetesCluster: 'myAKSCluster'
        secretType: 'dockerRegistry'
        secretName: 'acr-secret'
        dockerRegistryEndpoint: 'acr-login'

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        targetPath: '$(Pipeline.Workspace)/manifests'
    - task: KubernetesManifest@1
      inputs:
        action: 'deploy'
        connectionType: 'azureResourceManager'
        azureSubscriptionConnection: 'az-devops-sp-vishwa'
        azureResourceGroup: 'aks-vishwa'
        kubernetesCluster: 'myAKSCluster'
        manifests: |
          $(Pipeline.Workspace)/manifests/deploy-prod.yaml
          $(Pipeline.Workspace)/manifests/service.yaml
        imagePullSecrets: 'acr'